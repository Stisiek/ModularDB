//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param token (optional) 
     * @return OK
     */
    getAllRawFields(token: string | undefined): Promise<FieldBox[]> {
        let url_ = this.baseUrl + "/FieldBox/GetAllRawFields?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllRawFields(_response);
        });
    }

    protected processGetAllRawFields(response: Response): Promise<FieldBox[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FieldBox.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FieldBox[]>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    saveNewFieldBox(token: string | undefined, body: FieldBox | undefined): Promise<void> {
        let url_ = this.baseUrl + "/FieldBox/SaveNewFieldBox?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveNewFieldBox(_response);
        });
    }

    protected processSaveNewFieldBox(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param removeIndex (optional) 
     * @param token (optional) 
     * @return OK
     */
    removeFieldBox(removeIndex: number | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/FieldBox/RemoveFieldBox?";
        if (removeIndex === null)
            throw new Error("The parameter 'removeIndex' cannot be null.");
        else if (removeIndex !== undefined)
            url_ += "removeIndex=" + encodeURIComponent("" + removeIndex) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveFieldBox(_response);
        });
    }

    protected processRemoveFieldBox(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateFieldBox(token: string | undefined, body: FieldBox | undefined): Promise<void> {
        let url_ = this.baseUrl + "/FieldBox/UpdateFieldBox?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateFieldBox(_response);
        });
    }

    protected processUpdateFieldBox(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getAllTemplatesNames(): Promise<TemplateNamesAndIds[]> {
        let url_ = this.baseUrl + "/Template/GetAllTemplatesNames";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllTemplatesNames(_response);
        });
    }

    protected processGetAllTemplatesNames(response: Response): Promise<TemplateNamesAndIds[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TemplateNamesAndIds.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TemplateNamesAndIds[]>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getWholeTemplate(id: number | undefined): Promise<Template> {
        let url_ = this.baseUrl + "/Template/GetWholeTemplate?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWholeTemplate(_response);
        });
    }

    protected processGetWholeTemplate(response: Response): Promise<Template> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Template.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Template>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    saveNewTemplate(token: string | undefined, body: Template | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Template/SaveNewTemplate?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveNewTemplate(_response);
        });
    }

    protected processSaveNewTemplate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param token (optional) 
     * @return OK
     */
    removeTemplate(id: number | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Template/RemoveTemplate?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveTemplate(_response);
        });
    }

    protected processRemoveTemplate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateTemplate(token: string | undefined, body: Template | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Template/UpdateTemplate?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTemplate(_response);
        });
    }

    protected processUpdateTemplate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getRecordInfo(id: number | undefined): Promise<TemplateData> {
        let url_ = this.baseUrl + "/TemplateData/GetRecordInfo?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRecordInfo(_response);
        });
    }

    protected processGetRecordInfo(response: Response): Promise<TemplateData> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateData.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TemplateData>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    saveNewRecord(token: string | undefined, body: TemplateData | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TemplateData/SaveNewRecord?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveNewRecord(_response);
        });
    }

    protected processSaveNewRecord(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param token (optional) 
     * @return OK
     */
    deleteTemplateDataRecord(id: number | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TemplateData/DeleteTemplateDataRecord?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTemplateDataRecord(_response);
        });
    }

    protected processDeleteTemplateDataRecord(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateTemplateDataRecord(token: string | undefined, body: TemplateData | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TemplateData/UpdateTemplateDataRecord?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTemplateDataRecord(_response);
        });
    }

    protected processUpdateTemplateDataRecord(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    templateDataForSearchResult(body: SearchDataDto | undefined): Promise<TemplateDataForSearchResultDto[]> {
        let url_ = this.baseUrl + "/TemplateData/TemplateDataForSearchResult";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTemplateDataForSearchResult(_response);
        });
    }

    protected processTemplateDataForSearchResult(response: Response): Promise<TemplateDataForSearchResultDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TemplateDataForSearchResultDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TemplateDataForSearchResultDto[]>(null as any);
    }

    /**
     * @return OK
     */
    logIn(login: string, password: string): Promise<string> {
        let url_ = this.baseUrl + "/User/LogIn/{login}/{password}";
        if (login === undefined || login === null)
            throw new Error("The parameter 'login' must be defined.");
        url_ = url_.replace("{login}", encodeURIComponent("" + login));
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined.");
        url_ = url_.replace("{password}", encodeURIComponent("" + password));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogIn(_response);
        });
    }

    protected processLogIn(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    createNewUser(token: string | undefined, body: User | undefined): Promise<void> {
        let url_ = this.baseUrl + "/User/CreateNewUser?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNewUser(_response);
        });
    }

    protected processCreateNewUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param token (optional) 
     * @param body (optional) 
     * @return OK
     */
    editUser(token: string | undefined, body: User | undefined): Promise<void> {
        let url_ = this.baseUrl + "/User/EditUser?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditUser(_response);
        });
    }

    protected processEditUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param shouldBeActive (optional) 
     * @param token (optional) 
     * @return OK
     */
    activateOrDeactivateUser(id: number | undefined, shouldBeActive: boolean | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/User/ActivateOrDeactivateUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (shouldBeActive === null)
            throw new Error("The parameter 'shouldBeActive' cannot be null.");
        else if (shouldBeActive !== undefined)
            url_ += "shouldBeActive=" + encodeURIComponent("" + shouldBeActive) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivateOrDeactivateUser(_response);
        });
    }

    protected processActivateOrDeactivateUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param token (optional) 
     * @return OK
     */
    deleteUser(id: number | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/User/DeleteUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param token (optional) 
     * @return OK
     */
    getAllUsersInfoForSuperuser(token: string | undefined): Promise<UserInfoForSuperuserDto[]> {
        let url_ = this.baseUrl + "/User/GetAllUsersInfoForSuperuser?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllUsersInfoForSuperuser(_response);
        });
    }

    protected processGetAllUsersInfoForSuperuser(response: Response): Promise<UserInfoForSuperuserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserInfoForSuperuserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoForSuperuserDto[]>(null as any);
    }
}

export class FieldBox implements IFieldBox {
    id?: number;
    memberId?: number;
    title!: string;
    value?: string | undefined;
    isNumber?: boolean;
    isTemplate!: boolean;
    position?: number;
    searchPosition?: number;
    templateParentId?: number;
    createdBy?: number;
    createdAt?: Date;
    editedBy?: number;
    editedAt?: Date;
    imageCount?: number | undefined;
    fileCount?: number | undefined;
    description?: string | undefined;
    dateFrom?: Date;
    dateTo?: Date;
    isSingleDate?: boolean | undefined;
    type!: string;

    constructor(data?: IFieldBox) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.memberId = _data["memberId"];
            this.title = _data["title"];
            this.value = _data["value"];
            this.isNumber = _data["isNumber"];
            this.isTemplate = _data["isTemplate"];
            this.position = _data["position"];
            this.searchPosition = _data["searchPosition"];
            this.templateParentId = _data["templateParentId"];
            this.createdBy = _data["createdBy"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.editedBy = _data["editedBy"];
            this.editedAt = _data["editedAt"] ? new Date(_data["editedAt"].toString()) : <any>undefined;
            this.imageCount = _data["imageCount"];
            this.fileCount = _data["fileCount"];
            this.description = _data["description"];
            this.dateFrom = _data["dateFrom"] ? new Date(_data["dateFrom"].toString()) : <any>undefined;
            this.dateTo = _data["dateTo"] ? new Date(_data["dateTo"].toString()) : <any>undefined;
            this.isSingleDate = _data["isSingleDate"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): FieldBox {
        data = typeof data === 'object' ? data : {};
        let result = new FieldBox();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["memberId"] = this.memberId;
        data["title"] = this.title;
        data["value"] = this.value;
        data["isNumber"] = this.isNumber;
        data["isTemplate"] = this.isTemplate;
        data["position"] = this.position;
        data["searchPosition"] = this.searchPosition;
        data["templateParentId"] = this.templateParentId;
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["editedBy"] = this.editedBy;
        data["editedAt"] = this.editedAt ? this.editedAt.toISOString() : <any>undefined;
        data["imageCount"] = this.imageCount;
        data["fileCount"] = this.fileCount;
        data["description"] = this.description;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>undefined;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>undefined;
        data["isSingleDate"] = this.isSingleDate;
        data["type"] = this.type;
        return data;
    }
}

export interface IFieldBox {
    id?: number;
    memberId?: number;
    title: string;
    value?: string | undefined;
    isNumber?: boolean;
    isTemplate: boolean;
    position?: number;
    searchPosition?: number;
    templateParentId?: number;
    createdBy?: number;
    createdAt?: Date;
    editedBy?: number;
    editedAt?: Date;
    imageCount?: number | undefined;
    fileCount?: number | undefined;
    description?: string | undefined;
    dateFrom?: Date;
    dateTo?: Date;
    isSingleDate?: boolean | undefined;
    type: string;
}

export class SearchDataDto implements ISearchDataDto {
    searchFilter?: { [key: string]: string; } | undefined;
    dateFilter?: { [key: string]: string; } | undefined;
    skip?: number;

    constructor(data?: ISearchDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["searchFilter"]) {
                this.searchFilter = {} as any;
                for (let key in _data["searchFilter"]) {
                    if (_data["searchFilter"].hasOwnProperty(key))
                        (<any>this.searchFilter)![key] = _data["searchFilter"][key];
                }
            }
            if (_data["dateFilter"]) {
                this.dateFilter = {} as any;
                for (let key in _data["dateFilter"]) {
                    if (_data["dateFilter"].hasOwnProperty(key))
                        (<any>this.dateFilter)![key] = _data["dateFilter"][key];
                }
            }
            this.skip = _data["skip"];
        }
    }

    static fromJS(data: any): SearchDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.searchFilter) {
            data["searchFilter"] = {};
            for (let key in this.searchFilter) {
                if (this.searchFilter.hasOwnProperty(key))
                    (<any>data["searchFilter"])[key] = (<any>this.searchFilter)[key];
            }
        }
        if (this.dateFilter) {
            data["dateFilter"] = {};
            for (let key in this.dateFilter) {
                if (this.dateFilter.hasOwnProperty(key))
                    (<any>data["dateFilter"])[key] = (<any>this.dateFilter)[key];
            }
        }
        data["skip"] = this.skip;
        return data;
    }
}

export interface ISearchDataDto {
    searchFilter?: { [key: string]: string; } | undefined;
    dateFilter?: { [key: string]: string; } | undefined;
    skip?: number;
}

export class Template implements ITemplate {
    id?: number;
    name!: string;
    items!: FieldBox[];
    searchItems!: FieldBox[];

    constructor(data?: ITemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
            this.searchItems = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(FieldBox.fromJS(item));
            }
            if (Array.isArray(_data["searchItems"])) {
                this.searchItems = [] as any;
                for (let item of _data["searchItems"])
                    this.searchItems!.push(FieldBox.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Template {
        data = typeof data === 'object' ? data : {};
        let result = new Template();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.searchItems)) {
            data["searchItems"] = [];
            for (let item of this.searchItems)
                data["searchItems"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ITemplate {
    id?: number;
    name: string;
    items: FieldBox[];
    searchItems: FieldBox[];
}

export class TemplateData implements ITemplateData {
    id?: number;
    title!: string;
    items?: FieldBox[] | undefined;
    createdBy?: number;
    createdAt?: Date;
    editedBy?: number;
    editedAt?: Date;
    templateId!: number;
    template?: Template;

    constructor(data?: ITemplateData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(FieldBox.fromJS(item));
            }
            this.createdBy = _data["createdBy"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.editedBy = _data["editedBy"];
            this.editedAt = _data["editedAt"] ? new Date(_data["editedAt"].toString()) : <any>undefined;
            this.templateId = _data["templateId"];
            this.template = _data["template"] ? Template.fromJS(_data["template"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TemplateData {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["editedBy"] = this.editedBy;
        data["editedAt"] = this.editedAt ? this.editedAt.toISOString() : <any>undefined;
        data["templateId"] = this.templateId;
        data["template"] = this.template ? this.template.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITemplateData {
    id?: number;
    title: string;
    items?: FieldBox[] | undefined;
    createdBy?: number;
    createdAt?: Date;
    editedBy?: number;
    editedAt?: Date;
    templateId: number;
    template?: Template;
}

export class TemplateDataForSearchResultDto implements ITemplateDataForSearchResultDto {
    id?: number;
    title?: string | undefined;
    whatFoundWhere?: { [key: string]: string; } | undefined;
    dateAdded?: Date;

    constructor(data?: ITemplateDataForSearchResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            if (_data["whatFoundWhere"]) {
                this.whatFoundWhere = {} as any;
                for (let key in _data["whatFoundWhere"]) {
                    if (_data["whatFoundWhere"].hasOwnProperty(key))
                        (<any>this.whatFoundWhere)![key] = _data["whatFoundWhere"][key];
                }
            }
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TemplateDataForSearchResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateDataForSearchResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        if (this.whatFoundWhere) {
            data["whatFoundWhere"] = {};
            for (let key in this.whatFoundWhere) {
                if (this.whatFoundWhere.hasOwnProperty(key))
                    (<any>data["whatFoundWhere"])[key] = (<any>this.whatFoundWhere)[key];
            }
        }
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        return data;
    }
}

export interface ITemplateDataForSearchResultDto {
    id?: number;
    title?: string | undefined;
    whatFoundWhere?: { [key: string]: string; } | undefined;
    dateAdded?: Date;
}

export class TemplateNamesAndIds implements ITemplateNamesAndIds {
    id?: number;
    title?: string | undefined;

    constructor(data?: ITemplateNamesAndIds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): TemplateNamesAndIds {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateNamesAndIds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface ITemplateNamesAndIds {
    id?: number;
    title?: string | undefined;
}

export class User implements IUser {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    username!: string;
    password!: string;
    permissions!: number;
    createdAt?: Date;
    isActive?: boolean;
    isDeleted?: boolean;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.permissions = _data["permissions"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["username"] = this.username;
        data["password"] = this.password;
        data["permissions"] = this.permissions;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IUser {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    username: string;
    password: string;
    permissions: number;
    createdAt?: Date;
    isActive?: boolean;
    isDeleted?: boolean;
}

export class UserInfoForSuperuserDto implements IUserInfoForSuperuserDto {
    id?: number;
    login?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    permissionLevel?: number;
    isActive?: boolean;
    hireDate?: Date;

    constructor(data?: IUserInfoForSuperuserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.permissionLevel = _data["permissionLevel"];
            this.isActive = _data["isActive"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserInfoForSuperuserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoForSuperuserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["permissionLevel"] = this.permissionLevel;
        data["isActive"] = this.isActive;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUserInfoForSuperuserDto {
    id?: number;
    login?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    permissionLevel?: number;
    isActive?: boolean;
    hireDate?: Date;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}